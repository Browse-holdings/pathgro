;;d
;; pathgro - combinatoric pathname wordlist expander
;;
;; v1.0 coded by Derek Callaway [derek.callaway (AT) iocative {D0T} com]
;;

(define-module (pathgro main)
               #:export (main)
               #:use-module (ice-9 and-let-star)
               #:use-module (ice-9 common-list)
               #:use-module (ice-9 getopt-long)
               #:use-module (srfi srfi-1))

(use-modules ((pathgro base read-pathsfiles) #:select (read-pathsfiles bases dirns extns)))
(use-modules ((pathgro base pathgro-dirnames) #:select (pathgro-dirnames combine-paths)))
(use-modules ((pathgro base prepend-slashes) #:select (prepend-slashes unprepend-slashes)))
(use-modules ((pathgro base append-slashes) #:select (append-slashes unappend-slashes)))
(use-modules ((pathgro util ansi-color)))
(use-modules ((pathgro util flatten)))
(use-modules ((pathgro util println)))
(use-modules ((pathgro util unblank)))
(use-modules ((pathgro syntax let-values)))

(define pathgro-debug-mode #t)

(define (display-help)
  (newline)
  (display (colorize-string "usage" 'BLACK 'ON-YELLOW 'BOLD 'UNDERLINE))
  (display (colorize-string ": " 'BOLD))
  (display (colorize-string "pathgro" 'BLACK 'ON-GREEN 'BOLD))
  (display " ")
  (display (colorize-string "[<OPTIONS>]" 'BLACK 'ON-BLUE 'UNDERLINE))
  (display " ")
  (display (colorize-string "[<FILES>]" 'BLACK 'ON-BLUE 'UNDERLINE))
  (newline)(newline)
  (display "  ")
  (display (colorize-string "<OPTIONS>" 'BLACK 'ON-BLUE 'UNDERLINE))
  (display "         ")
  (display (colorize-string "one or more of the command line flags below" 'BLUE))
  (newline)(newline)
  (display "  ")
  (display (colorize-string "-v, --version" 'BLACK 'ON-CYAN 'BOLD 'UNDERLINE))
  (display "     ")
  (display (colorize-string "displays the current software version banner string" 'CYAN))
  (newline)
  (display "  ")
  (display (colorize-string "-h, --help" 'BLACK 'ON-CYAN 'BOLD 'UNDERLINE))
  (display "        ")
  (display (colorize-string "prints the usage information you're reading now" 'CYAN))
  (newline)
  (display "  ")
  (display (colorize-string "-b, --basename" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "    ")
  (display (colorize-string "show base file names" 'GREEN))
  (newline)
  (display "  ")
  (display (colorize-string "-d, --dirname" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "     ")
  (display (colorize-string "display directory names" 'GREEN))
  (newline)
  (display "  ")
  (display (colorize-string "-e, --extname" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "     ")
  (display (colorize-string "output file extensions" 'GREEN))
  (newline)
  (display "  ")
  (display (colorize-string "-x, --extdirname" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "  ")
  (display (colorize-string "append file extensions to directory names" 'GREEN))
  (newline)
  (display "  ")
  (display (colorize-string "-p, --powerset" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "    ")
  (display (colorize-string "compute all permutations and combinations of full pathnames" 'GREEN))
  (newline)
  (display "  ")
  (display (colorize-string "-l, --level" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display " ")
  (display (colorize-string "DEPTH" 'WHITE 'ON-BLUE 'REVERSE))
  (display " ")
  (display (colorize-string "limit folder depth of computed directory hierarchy" 'GREEN))
  (display "  ")
  (newline)
  (display "  ")
  (display (colorize-string "-s, --slash" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "       ")
  (display (colorize-string "prepend each path name with a forward slash character" 'GREEN))
  (newline)
  (display "  ")
  (display (colorize-string "-n, --noslash" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "     ")
  (display (colorize-string "remove a forward slash from the start of each path name" 'GREEN))
  (newline)
  (display "  ")
  (display (colorize-string "-r, --rmtrail" 'BLACK 'ON-GREEN 'BOLD 'UNDERLINE))
  (display "     ")
  (display (colorize-string "delete the trailing slash character from the end of every path" 'GREEN))
  (newline)
  (newline)
  (display "  ")
  (display (colorize-string "<FILES>" 'BLACK 'ON-BLUE 'UNDERLINE))
  (display "           ")
  (display (colorize-string "path names to wordlist files for parsing and expansion" 'BLUE))
  (newline)
  (display "   ")
  (display (colorize-string "DEPTH" 'WHITE 'ON-BLUE 'REVERSE))
  (display "            ")
  (display (colorize-string "maximum number of slashes to allow in computed paths" 'BLUE))
  (newline)
  (newline)
  (exit 0))

(define (display-version)
  (newline)
  (display (colorize-string "pathgro" 'BLACK 'ON-GREEN 'BOLD))
  (display " ")
  (display (colorize-string "v1.0" 'BLACK 'ON-YELLOW 'UNDERLINE))
  (display " ")
  (display (colorize-string "by" 'BLACK 'ON-CYAN))
  (display " ")
  (display (colorize-string "Derek" 'BLACK 'ON-BLUE)) 
  (display " ")
  (display (colorize-string "Callaway" 'BLACK 'ON-BLUE))
  (display " ")
  (display (colorize-string "[" 'YELLOW 'BOLD))
  (display (colorize-string "derek" 'WHITE 'ON-BLUE 'REVERSE 'UNDERLINE))
  (display (colorize-string "." 'BLACK 'ON-MAGENTA 'REVERSE 'UNDERLINE)) 
  (display (colorize-string "callaway" 'WHITE 'ON-BLUE 'REVERSE 'UNDERLINE))
  (display " ")
  (display (colorize-string "(" 'BLACK 'ON-WHITE)) 
  (display (colorize-string "AT" 'WHITE 'ON-BLACK)) 
  (display (colorize-string ")" 'BLACK 'ON-WHITE))
  (display " ")
  (display (colorize-string "ioactive" 'WHITE 'ON-RED 'BOLD 'REVERSE 'UNDERLINE))
  (display " ")
  (display (colorize-string "{" 'BLACK 'ON-WHITE)) 
  (display (colorize-string "D0T" 'WHITE 'ON-BLACK))
  (display (colorize-string "}" 'BLACK 'ON-WHITE))
  (display " ")
  (display (colorize-string "com" 'WHITE 'ON-RED 'BOLD 'REVERSE 'UNDERLINE))
  (display (colorize-string "]" 'YELLOW 'BOLD))
  (newline)
  (newline)
  (exit 0))

(define (main args)
  (let* ((option-spec '((help    (single-char #\h))
                        (basename (single-char #\b))
                        (dirname (single-char #\d))
                        (extname (single-char #\e))
                        (level (single-char #\l) (required? #t))
                        (filename (single-char #\f))
                        (powerset (single-char #\p))
                        (extdirname (single-char #\x))
                        (slash (single-char #\s))
                        (noslash (single-char #\n))
                        (rmtrail (single-char #\r))
                        (version (single-char #\v))))
                  (options        (getopt-long args option-spec))
                  (help-wanted    (option-ref options 'help #f))
                  (opt-basename   (option-ref options 'basename #f))
                  (opt-dirname    (option-ref options 'dirname #f))
                  (opt-extname    (option-ref options 'extname #f))
                  (opt-filename   (option-ref options 'filename #f))
                  (opt-extname    (option-ref options 'extname #f))
                  (opt-level      (option-ref options 'level #t))
                  (opt-powerset   (option-ref options 'powerset #f))
                  (opt-extdirname (option-ref options 'extdirname #f))
                  (opt-slash      (option-ref options 'slash #f))
                  (opt-noslash    (option-ref options 'noslash #f))
                  (opt-rmtrail    (option-ref options 'rmtrail #f))
                  (version-wanted (option-ref options 'version #f)))
    (cond
      (help-wanted
        (display-help))
      (version-wanted
        (display-version))
      (else
        (let ((stripped-args (option-ref options '() '())))
          (read-pathsfiles stripped-args)
          (let ((folder-depth (if (number? opt-level) opt-level 4096))
                (cfiles (flatten (uniq (unblank (combine-paths bases extns))))))
            (display "folder-depth: ")(display folder-depth)(newline)
            (letrec ((edirs (flatten (combine-paths dirns extns)))
                  (cdirs (append dirns edirs)))
                (if (or opt-basename opt-dirname opt-extname opt-filename opt-extname opt-powerset opt-extdirname)
                  (begin
                    (when opt-noslash (when (not opt-slash) (set! prepend-slashes unprepend-slashes)))
                    (when (not opt-rmtrail) (set! unappend-slashes noop))
                    (when opt-filename (for-each println (prepend-slashes cfiles)))
                    (when opt-basename (for-each println (prepend-slashes bases)))
                    (when opt-extname  (for-each println (prepend-slashes extns)))
                    (when opt-extdirname (for-each println (prepend-slashes edirs)))
                    (when opt-powerset (for-each println (pathgro-dirnames folder-depth cfiles))))
                  (display-help))
                (exit 0))))))))
