;;
;; pathgro - combinatoric pathname wordlist expander
;;
;; v1.0 coded by Derek Callaway [derek.callaway (AT) ioactive {D0T} com]
;;

(define-module (pathgro main)
               #:export (main)
               #:use-module (ice-9 common-list)
               #:use-module (ice-9 getopt-long)
               #:use-module (srfi srfi-1))

(use-modules (pathgro base combine-paths))
(use-modules (pathgro base read-pathsfiles))
(use-modules (pathgro base path-combos))
(use-modules (pathgro base path-kperms))
(use-modules (pathgro base path-powerset))
(use-modules (pathgro base path-slashes))
(use-modules (pathgro base path-strings))
(use-modules (pathgro util ansi-color) (pathgro util clean-list) (pathgro util stdio))
(use-modules (pathgro version) (pathgro help))

(define (main args) 
  (let* 
    ((option-spec '((help       (single-char #\h))
                    (basename   (single-char #\b))
                    (dirname    (single-char #\d))
                    (extname    (single-char #\e))
                    (filename   (single-char #\f))
                    ;(infix      (single-char #\i))
                    ;(suffix     (single-char #\s))
                    ;(prefix     (single-char #\p))
                    ;(trail      (single-char #\t))
                    (powerset   (single-char #\p) (value #t))
                    (combos     (single-char #\c) (value #t))
                    (kperms     (single-char #\k) (value #t))
                    (extdirname (single-char #\x))
                    (noslash    (single-char #\n))
                    (rmtrail    (single-char #\r))
                    (version    (single-char #\v))))
     (options          (getopt-long args option-spec #:stop-at-first-non-option #t))
     (help-wanted      (option-ref options 'help #f))
     (version-wanted   (option-ref options 'version #f))
     (opt-basename     (option-ref options 'basename #f))
     (opt-dirname      (option-ref options 'dirname #f))
     (opt-extname      (option-ref options 'extname #f))
     (opt-filename     (option-ref options 'filename #f))
     (opt-powerset     (string->number (option-ref options 'powerset "0")))
     (opt-combos       (string->number (option-ref options 'combos "0")))
     (opt-kperms       (string->number (option-ref options 'kperms "0")))
     ;(opt-infix       (option-ref options 'infix ""))
     ;(opt-prefix      (option-ref options 'prefix ""))
     ;(opt-suffix      (option-ref options 'suffix ""))
     (opt-extdirname   (option-ref options 'extdirname #f))
     (opt-noslash      (option-ref options 'noslash #f))
     (opt-rmtrail      (option-ref options 'rmtrail #f)))
    (cond
      (help-wanted
        (display-help))
      (version-wanted
        (display-version))
      (else
        (let ((stripped-args (option-ref options '() '()))
              (pathgro-debug (getenv "PATHGRO_DEBUG")))
          (when (zero? (length stripped-args)) (display-help))
          (read-pathsfiles stripped-args)
          (let ((cfiles (clean (combine-files-helper bases extns)))
                (edirs (clean (combine-files-helper dirns extns))))
                (when opt-noslash (set! prepend-slashes unprepend-slashes))
                (if opt-rmtrail (begin (set! dirns (unappend-slashes dirns))
                                       (set! edirs (unappend-slashes edirs)))
                  (set! unappend-slashes append-slashes))
                (when (and opt-filename (zero? opt-powerset)) (output-list (prepend-slashes cfiles)))
                (when opt-basename   (output-list (prepend-slashes bases)))
                (when (and opt-dirname (zero? opt-powerset)) (output-list (prepend-slashes dirns)))
                (when opt-extname    (output-list (prepend-slashes extns)))
                (when opt-extdirname (output-list (prepend-slashes edirs)))
                (when (< 0 opt-combos) 
                  (let ((cps (path-combos opt-combos cfiles dirns)))
                    (output-list (prepend-slashes (flatten cps)))))
                (when (< 0 opt-kperms)
                  (let ((pkp (path-kperms opt-kperms cfiles dirns)))
                      (output-list (prepend-slashes (flatten pkp)))))
                (when (< 0 opt-powerset)
                  (let ((aps (path-powerset opt-powerset cfiles dirns)))
                    (output-list (prepend-slashes (flatten aps)))))))))
  (when (and (zero? opt-combos) (zero? opt-kperms) (zero? opt-powerset)
             (false? opt-basename) (false? opt-dirname) (false? opt-extname) (false? opt-filename) 
             (false? opt-extdirname) (false? opt-noslash) (false? opt-rmtrail)) 
    (display-help))
  (exit 0)))
