;; blah

(define-module (pathgro main)
               #:export (main cfiles cdirs)
               #:use-module (ice-9 and-let-star)
               #:use-module (ice-9 common-list)
               #:use-module (ice-9 getopt-long)
               #:use-module (srfi srfi-1))

(use-modules ((pathgro base read-pathsfiles) #:select (read-pathsfiles bases dirns extns)))
(use-modules ((pathgro base pathgro-full) #:select (pathgro-full combine-paths)))
(use-modules ((pathgro util ansi-color)))


(define-syntax let-values
  (syntax-rules ()
                ((_ (bs producer) body ...)
                 (call-with-values (lambda () producer)
                                   (lambda bs body ...)))))

(define (unblank l)
  (delete "" l))

(define-values (stdin stdout stderr) (values (current-input-port) (current-output-port) (current-error-port)))

(define pathgro-debug-mode #t)

(define (println astr)
  (define (fprintln astr aport)
    (display astr aport)
    (newline aport))
  (fprintln astr stdout))

(define (flatten x)
  (cond ((null? x) '())
        ((not (pair? x)) (list x))
        (else (append (flatten (car x)) (flatten (cdr x))))))

(define (prepend-slashes slst)
  (if (null? slst)
    '()
    (if (not (string=? (substring (car slst) 0 1) "/"))
      (cons (string-append "/" (car slst)) (prepend-slashes (cdr slst)))
      (cons (car slst) (prepend-slashes (cdr slst))))))

(define (unprepend-slashes slst)
  (if (null? slst)
    '()
    (if (string=? (substring (car slst) 0 1) "/")
      (cons (substring (car slst) 1 (string-length (car slst))) (unprepend-slashes (cdr slst)))
      (cons (car slst) (unprepend-slashes (cdr slst))))))

(define (display-help)
  (newline)
  (display (color 'RED 'BOLD 'ON-BLUE 'UNDERLINE))
  (display "usage: pathgro [--version] [--help] [<FILES>]")(newline)
  (newline)(newline)
  (display "  -v, --version     displays the current software version banner string")(newline)
  (display "  -h, --help        shows the usage information you're reading now")(newline)
  (display "  -b, --basename    display base file names")(newline)
  (display "  -d, --dirname     display directory names")(newline)
  (display "  -e, --extname     display file extensions")(newline)
  (display "  -x, --extdirname  append file extensions to directory names")(newline)
  (display "  -p, --powerset    compute all permutations and combinations of full pathnames")(newline)
  (display "  -s, --slash       prepend each path name with a slash character")(newline)
  (display "  -n, --noslash     remove the slash character from each path name")(newline)
  (newline)(newline)
  (display "  <FILES>           path names to wordlist files for parsing and expansion")(newline)
  (newline)
  (exit 0))

(define (display-version)
  (display "pathgro v1.0 by Derek Callaway [derek.callaway (AT) ioactive {D0T} com]")
  (newline)
  (exit 0))

(define (main args)
  (let* ((option-spec '((help    (single-char #\h))
                        (basename (single-char #\b))
                        (dirname (single-char #\d))
                        (extname (single-char #\e))
                        (filename (single-char #\f))
                        (powerset (single-char #\p))
                        (extdirname (single-char #\x))
                        (slash (single-char #\s))
                        (noslash (single-char #\n))
                        ;(rmtrail (single-char #\r)) ; remove trailing slash
                        (version (single-char #\v))))
                  (options        (getopt-long args option-spec #:stop-at-first-non-option #t))
                  (help-wanted    (option-ref options 'help #f))
                  (opt-basename   (option-ref options 'basename #f))
                  (opt-dirname    (option-ref options 'dirname #f))
                  (opt-extname    (option-ref options 'extname #f))
                  (opt-filename   (option-ref options 'filename #f))
                  (opt-extname    (option-ref options 'extname #f))
                  (opt-powerset   (option-ref options 'powerset #f))
                  (opt-extdirname (option-ref options 'extdirname #f))
                  (opt-slash      (option-ref options 'slash #f))
                  (opt-noslash    (option-ref options 'noslash #f))
                  ;(opt-rmtrail    (option-ref options 'rmtrail #f))
                  (version-wanted (option-ref options 'version #f)))
    (cond
      (help-wanted
        (display-help))
      (version-wanted
        (display-version))
      (else
        (let ((stripped-args (option-ref options '() '())))
          (read-pathsfiles stripped-args)
          (let ((edirs (flatten (uniq (unblank (combine-paths dirns extns)))))
                (efiles (flatten (uniq (unblank (combine-paths bases extns))))))
            (let-values ((cfiles cdirs) (values (uniq (unblank (combine-paths bases extns))) (uniq (unblank (append dirns edirs)))))
                ;(append (flatten cfiles) bases extns dirns edirs cdirs))
                (if (not (or opt-basename opt-dirname opt-extname opt-filename opt-extname opt-powerset opt-extdirname))
                  (display-help)
                  (begin
                    (when opt-noslash (when (not opt-slash) (set! prepend-slashes unprepend-slashes)))
                    (when opt-filename (for-each println (prepend-slashes efiles)))
                    (when opt-basename (for-each println (prepend-slashes bases)))
                    (when opt-extname  (for-each println (prepend-slashes extns)))
                    (when opt-extdirname (for-each println (prepend-slashes efiles)))
                    (when opt-powerset (for-each println (pathgro-full cfiles)))))
                (exit 0))))))))
