(define-module (pathgro base path-strings)
  #:use-module (ice-9 common-list)
  #:export (append-strings prepend-strings unappend-strings unprepend-strings))

(define (prepend-strings astr slst)
  (if (null? slst)
    '()
    (cons (string-append/shared astr (car slst)) (prepend-strings astr (cdr slst)))))

(define (unprepend-strings astr slst)
  (if (null? slst)
    '()
    (let ((acar (car slst)))
    (if (string=? (substring/shared acar 0 (string-length astr)) astr)
        (cons (substring/shared acar (string-length astr) (string-length acar)) (unprepend-strings astr (cdr slst)))
        (cons acar (unprepend-strings astr (cdr slst)))))))

(define (append-strings astr slst)
  (if (null? slst)
    '()
    (letrec* ((acar (car slst))
             (alen (string-length acar))
             (sscr (substring/shared (string-reverse (string-append/shared acar astr)) 0 alen))) ; (reduce + 0 (map string-length acar))))) 
      (if (string=? acar sscr)
        (append-strings astr (cdr slst))
        (cons (string-append/shared acar astr) (append-strings astr (cdr slst)))))))

(define (unappend-strings astr slst)
  (if (null? slst)
    '()
    (letrec* ((acar (car slst))
             (acln (string-length acar))
             (stln (string-length astr))
             (sind (- acln stln))
             (asuf (substring/shared acar sind acln)))
    (if (string=? asuf astr)
      (cons (substring/shared acar 0 sind) (unappend-strings astr (cdr slst)))
      (cons acar (unappend-strings astr (cdr slst)))))))
